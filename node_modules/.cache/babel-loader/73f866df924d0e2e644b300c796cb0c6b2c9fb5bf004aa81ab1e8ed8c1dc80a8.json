{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nclass ChatService {\n  constructor() {\n    this.connection = new signalR.HubConnectionBuilder().withUrl('http://localhost:5000/chatHub').withAutomaticReconnect().build();\n    this.connectionPromise = null;\n  }\n  async ensureConnected() {\n    if (this.connection.state === signalR.HubConnectionState.Connected) {\n      return;\n    }\n    if (this.connection.state === signalR.HubConnectionState.Connecting) {\n      return new Promise(resolve => {\n        this.connection.onclose(() => resolve(this.ensureConnected()));\n      });\n    }\n    if (this.connection.state === signalR.HubConnectionState.Disconnected) {\n      try {\n        await this.connection.start();\n        console.log('SignalR Connected');\n      } catch (error) {\n        console.error('SignalR Connection Error:', error);\n        throw error;\n      }\n    }\n  }\n  async joinChat(userId) {\n    if (!userId) {\n      throw new Error('UserId is required');\n    }\n    try {\n      await this.ensureConnected();\n      await this.connection.invoke('JoinChat', userId.toString());\n      console.log('Successfully joined chat with userId:', userId);\n    } catch (error) {\n      console.error('Error joining chat:', error);\n      throw error;\n    }\n  }\n  onReceiveMessage(callback) {\n    if (!this.connection) return;\n    this.connection.on('ReceiveMessage', callback);\n  }\n  removeReceiveMessageListener() {\n    if (!this.connection) return;\n    this.connection.off('ReceiveMessage');\n  }\n  async disconnect() {\n    if (this.connection && this.connection.state === signalR.HubConnectionState.Connected) {\n      try {\n        await this.connection.stop();\n        console.log('SignalR disconnected');\n      } catch (error) {\n        console.error('Error disconnecting SignalR:', error);\n      }\n    }\n  }\n}\n\n// Tạo một instance duy nhất\nconst chatService = new ChatService();\nexport { chatService };","map":{"version":3,"names":["signalR","ChatService","constructor","connection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","connectionPromise","ensureConnected","state","HubConnectionState","Connected","Connecting","Promise","resolve","onclose","Disconnected","start","console","log","error","joinChat","userId","Error","invoke","toString","onReceiveMessage","callback","on","removeReceiveMessageListener","off","disconnect","stop","chatService"],"sources":["C:/Users/GIGABYTE/Desktop/PBL5/project1/src/services/chatService.js"],"sourcesContent":["import * as signalR from '@microsoft/signalr';\r\n\r\nclass ChatService {\r\n    constructor() {\r\n        this.connection = new signalR.HubConnectionBuilder()\r\n            .withUrl('http://localhost:5000/chatHub')\r\n            .withAutomaticReconnect()\r\n            .build();\r\n\r\n        this.connectionPromise = null;\r\n    }\r\n\r\n    async ensureConnected() {\r\n        if (this.connection.state === signalR.HubConnectionState.Connected) {\r\n            return;\r\n        }\r\n\r\n        if (this.connection.state === signalR.HubConnectionState.Connecting) {\r\n            return new Promise((resolve) => {\r\n                this.connection.onclose(() => resolve(this.ensureConnected()));\r\n            });\r\n        }\r\n\r\n        if (this.connection.state === signalR.HubConnectionState.Disconnected) {\r\n            try {\r\n                await this.connection.start();\r\n                console.log('SignalR Connected');\r\n            } catch (error) {\r\n                console.error('SignalR Connection Error:', error);\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    async joinChat(userId) {\r\n        if (!userId) {\r\n            throw new Error('UserId is required');\r\n        }\r\n\r\n        try {\r\n            await this.ensureConnected();\r\n            await this.connection.invoke('JoinChat', userId.toString());\r\n            console.log('Successfully joined chat with userId:', userId);\r\n        } catch (error) {\r\n            console.error('Error joining chat:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    onReceiveMessage(callback) {\r\n        if (!this.connection) return;\r\n        this.connection.on('ReceiveMessage', callback);\r\n    }\r\n\r\n    removeReceiveMessageListener() {\r\n        if (!this.connection) return;\r\n        this.connection.off('ReceiveMessage');\r\n    }\r\n\r\n    async disconnect() {\r\n        if (this.connection && this.connection.state === signalR.HubConnectionState.Connected) {\r\n            try {\r\n                await this.connection.stop();\r\n                console.log('SignalR disconnected');\r\n            } catch (error) {\r\n                console.error('Error disconnecting SignalR:', error);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Tạo một instance duy nhất\r\nconst chatService = new ChatService();\r\nexport { chatService };\r\n"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,oBAAoB;AAE7C,MAAMC,WAAW,CAAC;EACdC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,UAAU,GAAG,IAAIH,OAAO,CAACI,oBAAoB,CAAC,CAAC,CAC/CC,OAAO,CAAC,+BAA+B,CAAC,CACxCC,sBAAsB,CAAC,CAAC,CACxBC,KAAK,CAAC,CAAC;IAEZ,IAAI,CAACC,iBAAiB,GAAG,IAAI;EACjC;EAEA,MAAMC,eAAeA,CAAA,EAAG;IACpB,IAAI,IAAI,CAACN,UAAU,CAACO,KAAK,KAAKV,OAAO,CAACW,kBAAkB,CAACC,SAAS,EAAE;MAChE;IACJ;IAEA,IAAI,IAAI,CAACT,UAAU,CAACO,KAAK,KAAKV,OAAO,CAACW,kBAAkB,CAACE,UAAU,EAAE;MACjE,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;QAC5B,IAAI,CAACZ,UAAU,CAACa,OAAO,CAAC,MAAMD,OAAO,CAAC,IAAI,CAACN,eAAe,CAAC,CAAC,CAAC,CAAC;MAClE,CAAC,CAAC;IACN;IAEA,IAAI,IAAI,CAACN,UAAU,CAACO,KAAK,KAAKV,OAAO,CAACW,kBAAkB,CAACM,YAAY,EAAE;MACnE,IAAI;QACA,MAAM,IAAI,CAACd,UAAU,CAACe,KAAK,CAAC,CAAC;QAC7BC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD,MAAMA,KAAK;MACf;IACJ;EACJ;EAEA,MAAMC,QAAQA,CAACC,MAAM,EAAE;IACnB,IAAI,CAACA,MAAM,EAAE;MACT,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IACzC;IAEA,IAAI;MACA,MAAM,IAAI,CAACf,eAAe,CAAC,CAAC;MAC5B,MAAM,IAAI,CAACN,UAAU,CAACsB,MAAM,CAAC,UAAU,EAAEF,MAAM,CAACG,QAAQ,CAAC,CAAC,CAAC;MAC3DP,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEG,MAAM,CAAC;IAChE,CAAC,CAAC,OAAOF,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACf;EACJ;EAEAM,gBAAgBA,CAACC,QAAQ,EAAE;IACvB,IAAI,CAAC,IAAI,CAACzB,UAAU,EAAE;IACtB,IAAI,CAACA,UAAU,CAAC0B,EAAE,CAAC,gBAAgB,EAAED,QAAQ,CAAC;EAClD;EAEAE,4BAA4BA,CAAA,EAAG;IAC3B,IAAI,CAAC,IAAI,CAAC3B,UAAU,EAAE;IACtB,IAAI,CAACA,UAAU,CAAC4B,GAAG,CAAC,gBAAgB,CAAC;EACzC;EAEA,MAAMC,UAAUA,CAAA,EAAG;IACf,IAAI,IAAI,CAAC7B,UAAU,IAAI,IAAI,CAACA,UAAU,CAACO,KAAK,KAAKV,OAAO,CAACW,kBAAkB,CAACC,SAAS,EAAE;MACnF,IAAI;QACA,MAAM,IAAI,CAACT,UAAU,CAAC8B,IAAI,CAAC,CAAC;QAC5Bd,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACxD;IACJ;EACJ;AACJ;;AAEA;AACA,MAAMa,WAAW,GAAG,IAAIjC,WAAW,CAAC,CAAC;AACrC,SAASiC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}