{"ast":null,"code":"import axios from 'axios';\naxios.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  if (user !== null && user !== void 0 && user.role) {\n    config.headers['UserRole'] = user.role;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nconst API_URL = 'http://localhost:5000/api'; // Make sure this matches your backend URL\n\nexport const getProducts = async category => {\n  const response = await axios.get(`${API_URL}/products${category ? `?category=${category}` : ''}`);\n  return response.data;\n};\nexport const getProduct = async id => {\n  const response = await axios.get(`${API_URL}/products/${id}`);\n  return response.data;\n};\nexport const getProductById = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/products/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching product:', error);\n    throw error;\n  }\n};\nexport const testConnection = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/products/test-connection`);\n    console.log('Database connection test:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Connection test failed:', error);\n    throw error;\n  }\n};\nexport const login = async (email, password) => {\n  const response = await axios.post(`${API_URL}/auth/login`, {\n    email,\n    password\n  });\n  return response.data;\n};\nexport const register = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/register`, {\n      username: userData.username,\n      email: userData.email,\n      password: userData.password\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw error;\n  }\n};\nexport const logout = () => {\n  localStorage.removeItem('user');\n};\nexport const getCategories = async () => {\n  const response = await axios.get(`${API_URL}/categories`);\n  return response.data;\n};\nexport const getCategoryProducts = async categoryId => {\n  const response = await axios.get(`${API_URL}/categories/${categoryId}/products`);\n  return response.data;\n};\nexport const getSales = async () => {\n  const response = await axios.get(`${API_URL}/sales`);\n  return response.data;\n};\nexport const getSale = async id => {\n  const response = await axios.get(`${API_URL}/sales/${id}`);\n  return response.data;\n};\nexport const createSale = async saleData => {\n  const response = await axios.post(`${API_URL}/sales`, saleData);\n  return response.data;\n};\nexport const updateSaleProducts = async (saleId, productIds) => {\n  const response = await axios.put(`${API_URL}/sales/${saleId}/products`, productIds);\n  return response.data;\n};\nexport const getEmployees = async () => {\n  const response = await axios.get(`${API_URL}/employees`);\n  return response.data;\n};\nexport const getEmployee = async id => {\n  const response = await axios.get(`${API_URL}/employees/${id}`);\n  return response.data;\n};\nexport const createEmployee = async employeeData => {\n  try {\n    const response = await axios.post(`${API_URL}/employees`, employeeData);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('CreateEmployee API error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\nexport const updateEmployee = async (id, employeeData) => {\n  const response = await axios.put(`${API_URL}/employees/${id}`, employeeData);\n  return response.data;\n};\nexport const deleteEmployee = async id => {\n  const response = await axios.delete(`${API_URL}/employees/${id}`);\n  return response.data;\n};\nexport const getRoles = async () => {\n  const response = await axios.get(`${API_URL}/roles`);\n  return response.data;\n};\nexport const getRole = async id => {\n  const response = await axios.get(`${API_URL}/roles/${id}`);\n  return response.data;\n};\nexport const getCustomers = async () => {\n  const response = await axios.get(`${API_URL}/customers`);\n  return response.data;\n};\nexport const getConversation = async userId => {\n  try {\n    const user = JSON.parse(localStorage.getItem('user'));\n    const response = await axios.get(`${API_URL}/messages/conversation/${userId}`, {\n      headers: {\n        'UserId': user.id.toString()\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error('GetConversation API error:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\nexport const sendMessage = async messageData => {\n  try {\n    const user = JSON.parse(localStorage.getItem('user'));\n    const response = await axios.post(`${API_URL}/messages`, messageData, {\n      headers: {\n        'Content-Type': 'application/json',\n        'UserId': user.id.toString()\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    console.error('SendMessage API error:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw error;\n  }\n};\nexport const markMessageAsRead = async messageId => {\n  const response = await axios.put(`${API_URL}/messages/${messageId}/read`);\n  return response.data;\n};\nexport const getInventoryTransactions = async (params = {}) => {\n  try {\n    const queryParams = new URLSearchParams();\n    if (params.type) queryParams.append('type', params.type);\n    if (params.startDate) queryParams.append('startDate', params.startDate.toISOString());\n    if (params.endDate) queryParams.append('endDate', params.endDate.toISOString());\n    const url = `${API_URL}/inventory/transactions${queryParams.toString() ? `?${queryParams}` : ''}`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inventory transactions:', error);\n    throw error;\n  }\n};\nexport const createInventoryTransaction = async data => {\n  try {\n    const response = await axios.post(`${API_URL}/inventory/transactions`, {\n      ...data,\n      transactionType: data.transactionType.trim(),\n      // Ensure no whitespace\n      quantity: parseInt(data.quantity),\n      unitPrice: parseFloat(data.unitPrice),\n      createdById: parseInt(data.createdById)\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error('Error creating inventory transaction:', error);\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message;\n  }\n};\nexport const getLowStockProducts = async threshold => {\n  const response = await axios.get(`${API_URL}/inventory/low-stock?threshold=${threshold}`);\n  return response.data;\n};\nexport const getProductHistory = async (productId, startDate, endDate) => {\n  const params = new URLSearchParams();\n  if (startDate) params.append('startDate', startDate);\n  if (endDate) params.append('endDate', endDate);\n  const response = await axios.get(`${API_URL}/inventory/products/${productId}/history?${params}`);\n  return response.data;\n};","map":{"version":3,"names":["axios","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","role","headers","error","Promise","reject","API_URL","getProducts","category","response","get","data","getProduct","id","getProductById","console","testConnection","log","login","email","password","post","register","userData","username","logout","removeItem","getCategories","getCategoryProducts","categoryId","getSales","getSale","createSale","saleData","updateSaleProducts","saleId","productIds","put","getEmployees","getEmployee","createEmployee","employeeData","_error$response","message","updateEmployee","deleteEmployee","delete","getRoles","getRole","getCustomers","getConversation","userId","toString","_error$response2","sendMessage","messageData","_error$response3","markMessageAsRead","messageId","getInventoryTransactions","params","queryParams","URLSearchParams","type","append","startDate","toISOString","endDate","url","createInventoryTransaction","transactionType","trim","quantity","parseInt","unitPrice","parseFloat","createdById","_error$response4","getLowStockProducts","threshold","getProductHistory","productId"],"sources":["C:/Users/GIGABYTE/Desktop/PBL5/project1/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        if (user?.role) {\r\n            config.headers['UserRole'] = user.role;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nconst API_URL = 'http://localhost:5000/api';  // Make sure this matches your backend URL\r\n\r\nexport const getProducts = async (category) => {\r\n    const response = await axios.get(`${API_URL}/products${category ? `?category=${category}` : ''}`);\r\n    return response.data;\r\n};\r\n\r\nexport const getProduct = async (id) => {\r\n    const response = await axios.get(`${API_URL}/products/${id}`);\r\n    return response.data;\r\n};\r\n\r\nexport const getProductById = async (id) => {\r\n    try {\r\n        const response = await axios.get(`${API_URL}/products/${id}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching product:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const testConnection = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_URL}/products/test-connection`);\r\n        console.log('Database connection test:', response.data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Connection test failed:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const login = async (email, password) => {\r\n    const response = await axios.post(`${API_URL}/auth/login`, { email, password });\r\n    return response.data;\r\n};\r\n\r\nexport const register = async (userData) => {\r\n    try {\r\n        const response = await axios.post(`${API_URL}/auth/register`, {\r\n            username: userData.username,\r\n            email: userData.email,\r\n            password: userData.password\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Registration error:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('user');\r\n};\r\n\r\nexport const getCategories = async () => {\r\n    const response = await axios.get(`${API_URL}/categories`);\r\n    return response.data;\r\n};\r\n\r\nexport const getCategoryProducts = async (categoryId) => {\r\n    const response = await axios.get(`${API_URL}/categories/${categoryId}/products`);\r\n    return response.data;\r\n};\r\n\r\nexport const getSales = async () => {\r\n    const response = await axios.get(`${API_URL}/sales`);\r\n    return response.data;\r\n};\r\n\r\nexport const getSale = async (id) => {\r\n    const response = await axios.get(`${API_URL}/sales/${id}`);\r\n    return response.data;\r\n};\r\n\r\nexport const createSale = async (saleData) => {\r\n    const response = await axios.post(`${API_URL}/sales`, saleData);\r\n    return response.data;\r\n};\r\n\r\nexport const updateSaleProducts = async (saleId, productIds) => {\r\n    const response = await axios.put(`${API_URL}/sales/${saleId}/products`, productIds);\r\n    return response.data;\r\n};\r\n\r\nexport const getEmployees = async () => {\r\n    const response = await axios.get(`${API_URL}/employees`);\r\n    return response.data;\r\n};\r\n\r\nexport const getEmployee = async (id) => {\r\n    const response = await axios.get(`${API_URL}/employees/${id}`);\r\n    return response.data;\r\n};\r\n\r\nexport const createEmployee = async (employeeData) => {\r\n    try {\r\n        const response = await axios.post(`${API_URL}/employees`, employeeData);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('CreateEmployee API error:', error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const updateEmployee = async (id, employeeData) => {\r\n    const response = await axios.put(`${API_URL}/employees/${id}`, employeeData);\r\n    return response.data;\r\n};\r\n\r\nexport const deleteEmployee = async (id) => {\r\n    const response = await axios.delete(`${API_URL}/employees/${id}`);\r\n    return response.data;\r\n};\r\n\r\nexport const getRoles = async () => {\r\n    const response = await axios.get(`${API_URL}/roles`);\r\n    return response.data;\r\n};\r\n\r\nexport const getRole = async (id) => {\r\n    const response = await axios.get(`${API_URL}/roles/${id}`);\r\n    return response.data;\r\n};\r\n\r\nexport const getCustomers = async () => {\r\n    const response = await axios.get(`${API_URL}/customers`);\r\n    return response.data;\r\n};\r\n\r\nexport const getConversation = async (userId) => {\r\n    try {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        const response = await axios.get(`${API_URL}/messages/conversation/${userId}`, {\r\n            headers: {\r\n                'UserId': user.id.toString()\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('GetConversation API error:', error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const sendMessage = async (messageData) => {\r\n    try {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        const response = await axios.post(`${API_URL}/messages`, messageData, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'UserId': user.id.toString()\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('SendMessage API error:', error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const markMessageAsRead = async (messageId) => {\r\n    const response = await axios.put(`${API_URL}/messages/${messageId}/read`);\r\n    return response.data;\r\n};\r\n\r\nexport const getInventoryTransactions = async (params = {}) => {\r\n    try {\r\n        const queryParams = new URLSearchParams();\r\n        if (params.type) queryParams.append('type', params.type);\r\n        if (params.startDate) queryParams.append('startDate', params.startDate.toISOString());\r\n        if (params.endDate) queryParams.append('endDate', params.endDate.toISOString());\r\n        \r\n        const url = `${API_URL}/inventory/transactions${queryParams.toString() ? `?${queryParams}` : ''}`;\r\n        const response = await axios.get(url);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching inventory transactions:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const createInventoryTransaction = async (data) => {\r\n    try {\r\n        const response = await axios.post(`${API_URL}/inventory/transactions`, {\r\n            ...data,\r\n            transactionType: data.transactionType.trim(), // Ensure no whitespace\r\n            quantity: parseInt(data.quantity),\r\n            unitPrice: parseFloat(data.unitPrice),\r\n            createdById: parseInt(data.createdById)\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error creating inventory transaction:', error);\r\n        throw error.response?.data || error.message;\r\n    }\r\n};\r\n\r\nexport const getLowStockProducts = async (threshold) => {\r\n    const response = await axios.get(`${API_URL}/inventory/low-stock?threshold=${threshold}`);\r\n    return response.data;\r\n};\r\n\r\nexport const getProductHistory = async (productId, startDate, endDate) => {\r\n    const params = new URLSearchParams();\r\n    if (startDate) params.append('startDate', startDate);\r\n    if (endDate) params.append('endDate', endDate);\r\n    \r\n    const response = await axios.get(`${API_URL}/inventory/products/${productId}/history?${params}`);\r\n    return response.data;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}