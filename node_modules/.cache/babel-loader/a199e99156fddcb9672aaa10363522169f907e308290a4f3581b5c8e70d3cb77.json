{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nclass ChatService {\n  constructor() {\n    this.connection = new signalR.HubConnectionBuilder().withUrl('http://localhost:5000/chatHub').withAutomaticReconnect().build();\n    this.connecting = false;\n  }\n  async connect() {\n    try {\n      if (this.connection.state === signalR.HubConnectionState.Connected) {\n        return;\n      }\n      if (this.connecting) {\n        return;\n      }\n      this.connecting = true;\n      try {\n        await this.connection.start();\n        console.log('SignalR Connected successfully');\n      } finally {\n        this.connecting = false;\n      }\n    } catch (err) {\n      console.error('SignalR Connection Error:', err);\n      throw err;\n    }\n  }\n  async joinChat(userId) {\n    try {\n      await this.connect();\n      await this.connection.invoke('JoinChat', userId.toString());\n      console.log('Joined chat with userId:', userId);\n    } catch (error) {\n      console.error('Error joining chat:', error);\n      throw error;\n    }\n  }\n  onReceiveMessage(callback) {\n    this.connection.on('ReceiveMessage', callback);\n  }\n  removeReceiveMessageListener() {\n    this.connection.off('ReceiveMessage');\n  }\n  async disconnect() {\n    try {\n      if (this.connection.state === signalR.HubConnectionState.Connected) {\n        await this.connection.stop();\n        console.log('SignalR Disconnected');\n      }\n    } catch (err) {\n      console.error('Error disconnecting SignalR:', err);\n    }\n  }\n}\n\n// Tạo và export một instance duy nhất\nconst chatService = new ChatService();\nexport { chatService };","map":{"version":3,"names":["signalR","ChatService","constructor","connection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","connecting","connect","state","HubConnectionState","Connected","start","console","log","err","error","joinChat","userId","invoke","toString","onReceiveMessage","callback","on","removeReceiveMessageListener","off","disconnect","stop","chatService"],"sources":["C:/Users/GIGABYTE/Desktop/PBL5/project1/src/services/chatService.js"],"sourcesContent":["import * as signalR from '@microsoft/signalr';\r\n\r\nclass ChatService {\r\n    constructor() {\r\n        this.connection = new signalR.HubConnectionBuilder()\r\n            .withUrl('http://localhost:5000/chatHub')\r\n            .withAutomaticReconnect()\r\n            .build();\r\n\r\n        this.connecting = false;\r\n    }\r\n\r\n    async connect() {\r\n        try {\r\n            if (this.connection.state === signalR.HubConnectionState.Connected) {\r\n                return;\r\n            }\r\n\r\n            if (this.connecting) {\r\n                return;\r\n            }\r\n\r\n            this.connecting = true;\r\n\r\n            try {\r\n                await this.connection.start();\r\n                console.log('SignalR Connected successfully');\r\n            } finally {\r\n                this.connecting = false;\r\n            }\r\n        } catch (err) {\r\n            console.error('SignalR Connection Error:', err);\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    async joinChat(userId) {\r\n        try {\r\n            await this.connect();\r\n            await this.connection.invoke('JoinChat', userId.toString());\r\n            console.log('Joined chat with userId:', userId);\r\n        } catch (error) {\r\n            console.error('Error joining chat:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    onReceiveMessage(callback) {\r\n        this.connection.on('ReceiveMessage', callback);\r\n    }\r\n\r\n    removeReceiveMessageListener() {\r\n        this.connection.off('ReceiveMessage');\r\n    }\r\n\r\n    async disconnect() {\r\n        try {\r\n            if (this.connection.state === signalR.HubConnectionState.Connected) {\r\n                await this.connection.stop();\r\n                console.log('SignalR Disconnected');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error disconnecting SignalR:', err);\r\n        }\r\n    }\r\n}\r\n\r\n// Tạo và export một instance duy nhất\r\nconst chatService = new ChatService();\r\nexport { chatService };\r\n"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,oBAAoB;AAE7C,MAAMC,WAAW,CAAC;EACdC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,UAAU,GAAG,IAAIH,OAAO,CAACI,oBAAoB,CAAC,CAAC,CAC/CC,OAAO,CAAC,+BAA+B,CAAC,CACxCC,sBAAsB,CAAC,CAAC,CACxBC,KAAK,CAAC,CAAC;IAEZ,IAAI,CAACC,UAAU,GAAG,KAAK;EAC3B;EAEA,MAAMC,OAAOA,CAAA,EAAG;IACZ,IAAI;MACA,IAAI,IAAI,CAACN,UAAU,CAACO,KAAK,KAAKV,OAAO,CAACW,kBAAkB,CAACC,SAAS,EAAE;QAChE;MACJ;MAEA,IAAI,IAAI,CAACJ,UAAU,EAAE;QACjB;MACJ;MAEA,IAAI,CAACA,UAAU,GAAG,IAAI;MAEtB,IAAI;QACA,MAAM,IAAI,CAACL,UAAU,CAACU,KAAK,CAAC,CAAC;QAC7BC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MACjD,CAAC,SAAS;QACN,IAAI,CAACP,UAAU,GAAG,KAAK;MAC3B;IACJ,CAAC,CAAC,OAAOQ,GAAG,EAAE;MACVF,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAED,GAAG,CAAC;MAC/C,MAAMA,GAAG;IACb;EACJ;EAEA,MAAME,QAAQA,CAACC,MAAM,EAAE;IACnB,IAAI;MACA,MAAM,IAAI,CAACV,OAAO,CAAC,CAAC;MACpB,MAAM,IAAI,CAACN,UAAU,CAACiB,MAAM,CAAC,UAAU,EAAED,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAC;MAC3DP,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEI,MAAM,CAAC;IACnD,CAAC,CAAC,OAAOF,KAAK,EAAE;MACZH,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACf;EACJ;EAEAK,gBAAgBA,CAACC,QAAQ,EAAE;IACvB,IAAI,CAACpB,UAAU,CAACqB,EAAE,CAAC,gBAAgB,EAAED,QAAQ,CAAC;EAClD;EAEAE,4BAA4BA,CAAA,EAAG;IAC3B,IAAI,CAACtB,UAAU,CAACuB,GAAG,CAAC,gBAAgB,CAAC;EACzC;EAEA,MAAMC,UAAUA,CAAA,EAAG;IACf,IAAI;MACA,IAAI,IAAI,CAACxB,UAAU,CAACO,KAAK,KAAKV,OAAO,CAACW,kBAAkB,CAACC,SAAS,EAAE;QAChE,MAAM,IAAI,CAACT,UAAU,CAACyB,IAAI,CAAC,CAAC;QAC5Bd,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACvC;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVF,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAED,GAAG,CAAC;IACtD;EACJ;AACJ;;AAEA;AACA,MAAMa,WAAW,GAAG,IAAI5B,WAAW,CAAC,CAAC;AACrC,SAAS4B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}