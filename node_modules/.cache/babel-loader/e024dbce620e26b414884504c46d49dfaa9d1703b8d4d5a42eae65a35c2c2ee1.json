{"ast":null,"code":"import * as signalR from '@microsoft/signalr';\nclass ChatService {\n  constructor() {\n    this.connection = new signalR.HubConnectionBuilder().withUrl('http://localhost:5000/chatHub').withAutomaticReconnect().build();\n    this.connectionPromise = null;\n  }\n  async ensureConnection() {\n    if (!this.connectionPromise) {\n      this.connectionPromise = this.startConnection();\n    }\n    return this.connectionPromise;\n  }\n  async startConnection() {\n    try {\n      if (this.connection.state === signalR.HubConnectionState.Disconnected) {\n        await this.connection.start();\n        console.log('SignalR Connected');\n      }\n    } catch (err) {\n      console.error('SignalR Connection Error:', err);\n      this.connectionPromise = null;\n      throw err;\n    }\n  }\n  async joinChat(userId) {\n    try {\n      await this.ensureConnection();\n      await this.connection.invoke('JoinChat', userId.toString());\n      console.log('Joined chat with userId:', userId);\n    } catch (error) {\n      console.error('Error joining chat:', error);\n      this.connectionPromise = null;\n      throw error;\n    }\n  }\n  onReceiveMessage(callback) {\n    this.connection.on('ReceiveMessage', callback);\n  }\n  removeReceiveMessageListener() {\n    this.connection.off('ReceiveMessage');\n  }\n  async disconnect() {\n    try {\n      if (this.connection.state === signalR.HubConnectionState.Connected) {\n        await this.connection.stop();\n        console.log('SignalR Disconnected');\n      }\n      this.connectionPromise = null;\n    } catch (err) {\n      console.error('Error disconnecting SignalR:', err);\n    }\n  }\n}\nexport const chatService = new ChatService();","map":{"version":3,"names":["signalR","ChatService","constructor","connection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","connectionPromise","ensureConnection","startConnection","state","HubConnectionState","Disconnected","start","console","log","err","error","joinChat","userId","invoke","toString","onReceiveMessage","callback","on","removeReceiveMessageListener","off","disconnect","Connected","stop","chatService"],"sources":["C:/Users/GIGABYTE/Desktop/PBL5/project1/src/services/chatService.js"],"sourcesContent":["import * as signalR from '@microsoft/signalr';\r\n\r\nclass ChatService {\r\n    constructor() {\r\n        this.connection = new signalR.HubConnectionBuilder()\r\n            .withUrl('http://localhost:5000/chatHub')\r\n            .withAutomaticReconnect()\r\n            .build();\r\n\r\n        this.connectionPromise = null;\r\n    }\r\n\r\n    async ensureConnection() {\r\n        if (!this.connectionPromise) {\r\n            this.connectionPromise = this.startConnection();\r\n        }\r\n        return this.connectionPromise;\r\n    }\r\n\r\n    async startConnection() {\r\n        try {\r\n            if (this.connection.state === signalR.HubConnectionState.Disconnected) {\r\n                await this.connection.start();\r\n                console.log('SignalR Connected');\r\n            }\r\n        } catch (err) {\r\n            console.error('SignalR Connection Error:', err);\r\n            this.connectionPromise = null;\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    async joinChat(userId) {\r\n        try {\r\n            await this.ensureConnection();\r\n            await this.connection.invoke('JoinChat', userId.toString());\r\n            console.log('Joined chat with userId:', userId);\r\n        } catch (error) {\r\n            console.error('Error joining chat:', error);\r\n            this.connectionPromise = null;\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    onReceiveMessage(callback) {\r\n        this.connection.on('ReceiveMessage', callback);\r\n    }\r\n\r\n    removeReceiveMessageListener() {\r\n        this.connection.off('ReceiveMessage');\r\n    }\r\n\r\n    async disconnect() {\r\n        try {\r\n            if (this.connection.state === signalR.HubConnectionState.Connected) {\r\n                await this.connection.stop();\r\n                console.log('SignalR Disconnected');\r\n            }\r\n            this.connectionPromise = null;\r\n        } catch (err) {\r\n            console.error('Error disconnecting SignalR:', err);\r\n        }\r\n    }\r\n}\r\n\r\nexport const chatService = new ChatService();\r\n"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,oBAAoB;AAE7C,MAAMC,WAAW,CAAC;EACdC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,UAAU,GAAG,IAAIH,OAAO,CAACI,oBAAoB,CAAC,CAAC,CAC/CC,OAAO,CAAC,+BAA+B,CAAC,CACxCC,sBAAsB,CAAC,CAAC,CACxBC,KAAK,CAAC,CAAC;IAEZ,IAAI,CAACC,iBAAiB,GAAG,IAAI;EACjC;EAEA,MAAMC,gBAAgBA,CAAA,EAAG;IACrB,IAAI,CAAC,IAAI,CAACD,iBAAiB,EAAE;MACzB,IAAI,CAACA,iBAAiB,GAAG,IAAI,CAACE,eAAe,CAAC,CAAC;IACnD;IACA,OAAO,IAAI,CAACF,iBAAiB;EACjC;EAEA,MAAME,eAAeA,CAAA,EAAG;IACpB,IAAI;MACA,IAAI,IAAI,CAACP,UAAU,CAACQ,KAAK,KAAKX,OAAO,CAACY,kBAAkB,CAACC,YAAY,EAAE;QACnE,MAAM,IAAI,CAACV,UAAU,CAACW,KAAK,CAAC,CAAC;QAC7BC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MACpC;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVF,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAED,GAAG,CAAC;MAC/C,IAAI,CAACT,iBAAiB,GAAG,IAAI;MAC7B,MAAMS,GAAG;IACb;EACJ;EAEA,MAAME,QAAQA,CAACC,MAAM,EAAE;IACnB,IAAI;MACA,MAAM,IAAI,CAACX,gBAAgB,CAAC,CAAC;MAC7B,MAAM,IAAI,CAACN,UAAU,CAACkB,MAAM,CAAC,UAAU,EAAED,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAC;MAC3DP,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEI,MAAM,CAAC;IACnD,CAAC,CAAC,OAAOF,KAAK,EAAE;MACZH,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,IAAI,CAACV,iBAAiB,GAAG,IAAI;MAC7B,MAAMU,KAAK;IACf;EACJ;EAEAK,gBAAgBA,CAACC,QAAQ,EAAE;IACvB,IAAI,CAACrB,UAAU,CAACsB,EAAE,CAAC,gBAAgB,EAAED,QAAQ,CAAC;EAClD;EAEAE,4BAA4BA,CAAA,EAAG;IAC3B,IAAI,CAACvB,UAAU,CAACwB,GAAG,CAAC,gBAAgB,CAAC;EACzC;EAEA,MAAMC,UAAUA,CAAA,EAAG;IACf,IAAI;MACA,IAAI,IAAI,CAACzB,UAAU,CAACQ,KAAK,KAAKX,OAAO,CAACY,kBAAkB,CAACiB,SAAS,EAAE;QAChE,MAAM,IAAI,CAAC1B,UAAU,CAAC2B,IAAI,CAAC,CAAC;QAC5Bf,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACvC;MACA,IAAI,CAACR,iBAAiB,GAAG,IAAI;IACjC,CAAC,CAAC,OAAOS,GAAG,EAAE;MACVF,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAED,GAAG,CAAC;IACtD;EACJ;AACJ;AAEA,OAAO,MAAMc,WAAW,GAAG,IAAI9B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}